pip install opencv-python

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

def load_images_from_directory(directory):
    images = []
    for filename in os.listdir(directory):
        if filename.endswith(".jpg"):
            img_path = os.path.join(directory, filename)
            img = cv2.imread(img_path)
            # Preprocess the image if needed (e.g., resize, normalize, convert to grayscale)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # convert to grayscale
            img = cv2.resize(img, (100, 100)) # resize to a fixed size
            images.append(img)
    return images

male_directory = 'C:/Users/SATHYA NARAYANAN .B/Downloads/GenderData/Training/male'
female_directory = 'C:/Users/SATHYA NARAYANAN .B/Downloads/GenderData/Training/female'

male_images = load_images_from_directory(male_directory)
female_images = load_images_from_directory(female_directory)


# Step 2: Labeling
male_labels = np.zeros(len(male_images)) # Assign label 0 for male
female_labels = np.ones(len(female_images)) # Assign label 1 for female

# Check if images and labels have the same length
if len(male_images) != len(male_labels):
    print("Length mismatch between male images and male labels")
if len(female_images) != len(female_labels):
    print("Length mismatch between female images and female labels")

pip install tensorflow

# Step 3: Train-Test Split
X = np.array(male_images + female_images)
y = np.concatenate([male_labels, female_labels])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Preprocess Data
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)  # Add a channel dimension for grayscale images
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)
input_shape = (X_train.shape[1], X_train.shape[2], 1)  # Shape of input for CNN model

# Step 5: Model Architecture
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Step 6: Model Training
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=32, epochs=10, validation_data=(X_test, y_test))

# Step 7: Model Evaluation
y_pred_prob = model.predict(X_test)
y_pred = (y_pred_prob > 0.5).astype(int)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Step 8: Save the model
model.save('C:/Users/SATHYA NARAYANAN .B/Downloads/GenderData/gender_detection_model.h5')